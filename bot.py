import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import os

BOT_TOKEN = "7346291411:AAEySV35XOFkd35q_7JIIj1Fe7GzE12SNA4"
API_TOKEN = os.getenv('BOT_TOKEN')
PORT = int(os.environ.get("PORT", 10000))  # –ü–æ—Ä—Ç –¥–ª—è Render

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

user_carts = {}

catalog = {
    "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞": [],
    "–§—É—Ç–±–æ–ª–∫–∏/–ú–∞–π–∫–∏/–¢–æ–ø—ã": [],
    "–®—Ç–∞–Ω—ã/–ë—Ä—é–∫–∏/–®–æ—Ä—Ç—ã": [
        {
            "name": "–î–∂–∏–Ω—Å—ã Balenciaga",
            "price": "7990‚ÇΩ",
            "sizes": "S-XL",
            "photo": "https://example.com/photo1.jpg"
        },
        {
            "name": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –±—Ä—é–∫–∏ Balenciaga, —á–µ—Ä–Ω—ã–µ, –¥–≤–æ–π–Ω–∞—è —Ç–∞–ª–∏—è",
            "price": "9990‚ÇΩ",
            "sizes": "S-XL",
            "photo": "https://example.com/photo2.jpg"
        },
        {
            "name": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –±—Ä—é–∫–∏ Balenciaga, —Å–µ—Ä—ã–µ, –¥–≤–æ–π–Ω–∞—è —Ç–∞–ª–∏—è",
            "price": "9990‚ÇΩ",
            "sizes": "S-XL",
            "photo": "https://example.com/photo3.jpg"
        },
        {
            "name": "–î–∂–∏–Ω—Å–æ–≤—ã–µ –±—Ä—é–∫–∏ Vuja De Diviser (–Ω–∞–∏–∑–Ω–∞–Ω–∫—É)",
            "price": "10990‚ÇΩ",
            "sizes": "S-XL",
            "photo": "https://example.com/photo4.jpg"
        },
    ],
    "–•—É–¥–∏/–°–≤–∏—Ç–µ—Ä—ã": [],
    "–û–±—É–≤—å": [
        {
            "name": "New Balance 2002R",
            "price": "6000‚ÇΩ",
            "sizes": "36-45 EU",
            "photo": "https://example.com/n1.jpg"
        },
        {
            "name": "Dior B22",
            "price": "9900‚ÇΩ",
            "sizes": "36-45 EU",
            "photo": "https://example.com/n2.jpg"
        },
        {
            "name": "Dior B23",
            "price": "14900‚ÇΩ",
            "sizes": "36-45 EU",
            "photo": "https://example.com/n3.jpg"
        },
        {
            "name": "Prada Cloudbust Thunder",
            "price": "16900‚ÇΩ",
            "sizes": "36-45 EU",
            "photo": "https://example.com/n4.jpg"
        },
        {
            "name": "Yeezy Boost 350 (—Ä–∞–∑–Ω—ã–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏)",
            "price": "6190‚ÇΩ",
            "sizes": "36-45 EU",
            "photo": "https://example.com/n5.jpg"
        }
    ],
    "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": []
}


class OrderForm(StatesGroup):
    full_name = State()
    address = State()
    phone = State()
    payment = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"))
    keyboard.add(InlineKeyboardButton("–û—Ç–∑—ã–≤—ã", callback_data="reviews"))
    keyboard.add(InlineKeyboardButton("–û –Ω–∞—Å", callback_data="about"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ why resale.", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'catalog')
async def catalog_menu(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=1)
    for category in catalog.keys():
        keyboard.add(InlineKeyboardButton(category, callback_data=f"category:{category}"))
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('category:'))
async def show_category(callback_query: types.CallbackQuery):
    category_name = callback_query.data.split(':')[1]
    items = catalog.get(category_name, [])
    if not items:
        await bot.send_message(callback_query.from_user.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
    else:
        for item in items:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart:{item['name']}"))
            await bot.send_photo(callback_query.from_user.id, item["photo"],
                                 caption=f"{item['name']}\n–†–∞–∑–º–µ—Ä—ã: {item['sizes']}\n–¶–µ–Ω–∞: {item['price']}",
                                 reply_markup=keyboard)
    back = InlineKeyboardMarkup().add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="catalog"))
    await bot.send_message(callback_query.from_user.id, "‚¨Ö –ù–∞–∑–∞–¥", reply_markup=back)


@dp.callback_query_handler(lambda c: c.data.startswith('add_to_cart:'))
async def add_to_cart(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    product_name = callback_query.data.split(':')[1]
    user_carts.setdefault(user_id, []).append(product_name)
    await bot.answer_callback_query(callback_query.id, text=f"–¢–æ–≤–∞—Ä ¬´{product_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")


@dp.message_handler(commands=['cart'])
async def view_cart(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n" + "\n".join([f"- {item}" for item in cart])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
    keyboard.add(InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"))
    await message.answer(text, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "checkout")
async def checkout(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order"))
    await bot.send_message(callback_query.from_user.id, "–í—ã –≥–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "start_order")
async def start_order(callback_query: types.CallbackQuery):
    await OrderForm.full_name.set()
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")


@dp.message_handler(state=OrderForm.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await OrderForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")


@dp.message_handler(state=OrderForm.address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await OrderForm.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@dp.message_handler(state=OrderForm.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await OrderForm.next()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã.")


@dp.message_handler(state=OrderForm.payment, content_types=types.ContentType.PHOTO)
async def process_payment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    full_name = user_data.get('full_name')
    address = user_data.get('address')
    phone = user_data.get('phone')
    payment_screenshot = message.photo[-1].file_id

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_id = "@whyresale"
    await bot.send_message(admin_id, f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n–§–ò–û: {full_name}\n–ê–¥—Ä–µ—Å: {address}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã: {payment_screenshot}")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã
    await state.finish()

    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
