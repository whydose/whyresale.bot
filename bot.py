import json
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters, ConversationHandler
)

logging.basicConfig(level=logging.INFO)

# === –î–ê–ù–ù–´–ï ===
TOKEN = "7346291411:AAEySV35XOFkd35q_7JIIj1Fe7GzE12SNA4"
ADMIN_USERNAME = "@whyresale"
ORDERS_FILE = "orders.json"

# –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤
ITEMS = [
    {"id": "1", "name": "Nike Air Max", "price": "9000‚ÇΩ"},
    {"id": "2", "name": "Stone Island Pants", "price": "8500‚ÇΩ"}
]

# === –°–¢–ê–ù–´ –ê–ù–ö–ï–¢–´ ===
(ASK_NAME, ASK_ADDRESS, ASK_PHONE, WAITING_FOR_SCREENSHOT) = range(4)

user_cart = {}
user_forms = {}

# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton(f"{item['name']} - {item['price']}", callback_data=f"add_{item['id']}")]
        for item in ITEMS
    ]
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=InlineKeyboardMarkup(buttons))


async def cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cart_items = user_cart.get(user_id, [])
    if not cart_items:
        await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    buttons = []
    for item in cart_items:
        text += f"‚Ä¢ {item['name']} - {item['price']}\n"
        buttons.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {item['name']}", callback_data=f"remove_{item['id']}")])

    buttons.append([InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons))


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data.startswith("add_"):
        item_id = query.data.split("_")[1]
        item = next((i for i in ITEMS if i["id"] == item_id), None)
        if item:
            user_cart.setdefault(user_id, []).append(item)
            await query.edit_message_text(f"{item['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")

    elif query.data.startswith("remove_"):
        item_id = query.data.split("_")[1]
        cart = user_cart.get(user_id, [])
        user_cart[user_id] = [i for i in cart if i["id"] != item_id]
        await query.edit_message_text("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")

    elif query.data == "checkout":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        return ASK_NAME


# === –ê–ù–ö–ï–¢–ê ===
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_forms[update.effective_user.id] = {"name": update.message.text}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    return ASK_ADDRESS


async def ask_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_forms[update.effective_user.id]["address"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return ASK_PHONE


async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_forms[update.effective_user.id]["phone"] = update.message.text
    await update.message.reply_text(
        "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n\n"
        "üí≥ –°–ë–ï–†–ë–ê–ù–ö –ü–æ–ø–æ–≤ –ë.–ê\n"
        "üìÑ –ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: 40817810738129310987\n"
        "üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 2202 2081 3069 2370\n\n"
        "–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã."
    )
    return WAITING_FOR_SCREENSHOT


async def receive_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    form = user_forms.get(user_id)
    cart = user_cart.get(user_id, [])

    if not form or not cart:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    order = {
        "user": update.effective_user.username,
        "cart": cart,
        "form": form,
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    try:
        if not os.path.exists(ORDERS_FILE):
            with open(ORDERS_FILE, "w") as f:
                json.dump([], f)
        with open(ORDERS_FILE, "r+") as f:
            orders = json.load(f)
            orders.append(order)
            f.seek(0)
            json.dump(orders, f, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    screenshot_file_id = update.message.photo[-1].file_id if update.message.photo else None
    admin_text = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{update.effective_user.username}:\n"
        f"üìù –§–ò–û: {form['name']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {form['address']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {form['phone']}\n"
        f"üõí –ö–æ—Ä–∑–∏–Ω–∞:\n" +
        "\n".join([f" - {item['name']} ({item['price']})" for item in cart])
    )

    await context.bot.send_message(chat_id=ADMIN_USERNAME, text=admin_text)
    if screenshot_file_id:
        await context.bot.send_photo(chat_id=ADMIN_USERNAME, photo=screenshot_file_id)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    user_cart[user_id] = []
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cart", cart))
    app.add_handler(CallbackQueryHandler(handle_callback))

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_callback, pattern="^checkout$")],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_address)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
            WAITING_FOR_SCREENSHOT: [MessageHandler(filters.PHOTO, receive_screenshot)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)

    app.run_polling()


if __name__ == "__main__":
    main()
